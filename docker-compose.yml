version: "3"

services:
  hub-db:
    image: postgres
    container_name: jupyterhub-db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data
    volumes:
      - "db:/var/lib/postgresql/data"
    env_file:
      - .env
  hub:
    depends_on:
      - hub-db
    build:
      context: .
      dockerfile: ./dockerfiles/jupyterhub.dockerfile
    restart: always
    image: jupyterhub
    container_name: jupyterhub
    env_file:
      - .env
    volumes:
      # Bind Docker socket on the host so we can connect to the daemon from
      # within the container
      - "/var/run/docker.sock:/var/run/docker.sock:rw"
      # Bind Docker volume on host for JupyterHub database and cookie secrets
      - "data:/data"
      - "./dockerfiles/jupyterhub_conf/jupyterhub_config.py:/srv/jupyterhub/jupyterhub_config.py"
      - "./userlist:/srv/jupyterhub/userlist"
      - "isis-data:/isis/data"
      - "shared:/shared"
    ports:
      - "${NOTEBOOK_PORT}:8000"
    links:
      - hub-db
    environment:
      # All containers will join this network
      DOCKER_NETWORK_NAME: ${NETWORK}
      # JupyterHub will spawn this Notebook image for users
      DOCKER_NOTEBOOK_IMAGE: ${NOTEBOOK_IMAGE}
      # Notebook directory inside user image
      #DOCKER_NOTEBOOK_DIR: ${NOTEBOOK_DIR}
      # Using this run command (optional)
      #DOCKER_SPAWN_CMD: ${DOCKER_SPAWN_CMD}
      # Postgres db info
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: hub-db
    command: >
      jupyterhub -f /srv/jupyterhub/jupyterhub_config.py
volumes:
  data:
    external:
      name: ${JHDATA}
  db:
    external:
      name: ${JHDB}
  isis-data:
    external:
      name: ${ISISDATA}
  shared:
    external:
      name: ${SHARED}

networks:
  default:
    external:
      name: ${NETWORK}
